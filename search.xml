<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue学习日志</title>
      <link href="2021/07/28/Vue%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
      <url>2021/07/28/Vue%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue学习日志"><a href="#Vue学习日志" class="headerlink" title="Vue学习日志"></a>Vue学习日志</h1><h2 id="1-初识Vue"><a href="#1-初识Vue" class="headerlink" title="1.初识Vue"></a>1.初识Vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>初识Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;img/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;img/favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入Vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/jscript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">初识Vue：</span></span><br><span class="line"><span class="comment">1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</span></span><br><span class="line"><span class="comment">2.root容器里面的代码依然符合HTML规范，只不过混入了一些Vue语法；</span></span><br><span class="line"><span class="comment">3.root容器里面的代码被称为【Vue模板】；</span></span><br><span class="line"><span class="comment">4.Vue实例与容器是一一对应的；</span></span><br><span class="line"><span class="comment">5.真实开发中只有一个Vue实例，并且会配合组件一起使用；</span></span><br><span class="line"><span class="comment">6.&#123;&#123;xxx&#125;&#125;中xxx要写js表达式，且xxx可以读取到data中的所有属性；</span></span><br><span class="line"><span class="comment">7.一旦data中的数据发生变化，那么模板中用到该数据的地方也会自动更新；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--准备一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>年龄：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止Vue在启动时生成生产提示</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//创建一个Vue实例</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">el:<span class="string">&#x27;#root&#x27;</span>,<span class="comment">//选择关联id为root的容器，并为其创建Vue实例</span></span></span><br><span class="line"><span class="javascript">data:&#123;<span class="comment">//data中存储数据，数据供el指定的容器使用</span></span></span><br><span class="line"><span class="javascript">name:<span class="string">&#x27;张三01&#x27;</span>,</span></span><br><span class="line">age:18</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-vue模板语法"><a href="#2-vue模板语法" class="headerlink" title="2.vue模板语法"></a>2.vue模板语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>vue模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">vue模板语法有两大类：</span></span><br><span class="line"><span class="comment">1.插值语法：</span></span><br><span class="line"><span class="comment">功能：用于解析标签体内容；</span></span><br><span class="line"><span class="comment">写法：&#123;&#123;xxx&#125;&#125;，xxx为js表达式，且可以直接读取到data里的所有属性；</span></span><br><span class="line"><span class="comment">2.指令语法：</span></span><br><span class="line"><span class="comment">功能：用于标签（包括：标签属性、标签体内容、绑定事件······）；</span></span><br><span class="line"><span class="comment">写法：v-bind:href=&quot;xxx&quot; 或简写为 :href=&quot;xxx&quot;，xxx同样为js表达式，且可以直接读取到data里的所有属性；</span></span><br><span class="line"><span class="comment">备注：Vue中有很多的Vue指令，且形式都是v-????，此处只是拿v-bind举例；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--准备一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello, &#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&#x27;v-bind:&#x27;绑定数据，可以将标签里的属性的值和Vue实例里的data里的属性绑定,&#x27;v-bind:&#x27;可以简写为&#x27;:&#x27;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点我去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点我去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止Vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">el:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line">data:&#123;</span><br><span class="line"><span class="javascript">name:<span class="string">&#x27;jack&#x27;</span>,</span></span><br><span class="line"><span class="javascript">url:<span class="string">&#x27;https://www.baidu.com&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-vue的数据绑定"><a href="#3-vue的数据绑定" class="headerlink" title="3.vue的数据绑定"></a>3.vue的数据绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>vue的数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Vue中数据有两种绑定方式：</span></span><br><span class="line"><span class="comment">1.单向绑定（v-bind）：数据只能从data流向页面</span></span><br><span class="line"><span class="comment">2.双向绑定（v-model）：数据不仅能从data流向页面，还能从页面流向data。</span></span><br><span class="line"><span class="comment">备注：</span></span><br><span class="line"><span class="comment">1.双向绑定一般应用在表单类元素上（列如：input、select等）。</span></span><br><span class="line"><span class="comment">2.v-model:value可以简写为v-model，因为v-model默认就是收集的value的值。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--准备一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--普通写法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;/&gt;&lt;br /&gt;</span></span><br><span class="line"><span class="comment">双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--简写--&gt;</span></span><br><span class="line">单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--错误代码，因为v-model只能应用在表单类元素（输入类元素）上--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止Vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">el:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line">data:&#123;</span><br><span class="line"><span class="javascript">name:<span class="string">&#x27;jack&#x27;</span>,</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue学习日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合MyBatis（注解方式）</title>
      <link href="2021/07/01/springboot%E6%95%B4%E5%90%88Mybatis%EF%BC%88%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%EF%BC%89/"/>
      <url>2021/07/01/springboot%E6%95%B4%E5%90%88Mybatis%EF%BC%88%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合MyBatis（注解方式）"><a href="#springboot整合MyBatis（注解方式）" class="headerlink" title="springboot整合MyBatis（注解方式）"></a>springboot整合MyBatis（注解方式）</h1><hr><ul><li><p>在pom.xml文件中导入MyBatis所需依赖：</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jdbc的starter，如果使用mybatis-spring-boot-starter就不需要这个starter,因为mybatis的starter自带jdbc的starter --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis的starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid连接池依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在application.yaml文件中配置数据源和MyBatis：</p>  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据源的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建DataSourceConfig配置类：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置第三方组件（Druid连接池的数据源配置）</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建User实体类（实体类的属性要与数据表中字段名相同，数据库表的内容就不贴出来了）：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String imageSrc;</span><br><span class="line">    <span class="keyword">private</span> String manager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImageSrc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> imageSrc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageSrc</span><span class="params">(String imageSrc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imageSrc = imageSrc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setManager</span><span class="params">(String manager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manager = manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imageSrc=&#x27;&quot;</span> + imageSrc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, manager=&#x27;&quot;</span> + manager + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建UserMapper.java接口，并添加@Mapper注解，使用@Select(“select * from user”)注解方式写查询语句：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.tx.datasource.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Controller类：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;User&gt; <span class="title">findUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建主启动类MyApplication：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>到此为止springboot整合MyBatis的注解方式完成，运行主启动类的main函数，访问<a href="http://localhost:8080/findUser%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%90%E5%8A%9F%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E3%80%82">http://localhost:8080/findUser可以看到成功查询数据。</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot整合MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的基本使用</title>
      <link href="2021/05/28/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2021/05/28/Git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git的基本使用"><a href="#Git的基本使用" class="headerlink" title="Git的基本使用"></a>Git的基本使用</h1><h2 id="Git基本信息设置"><a href="#Git基本信息设置" class="headerlink" title="Git基本信息设置"></a>Git基本信息设置</h2><ol><li><p>设置用户名</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;填写自己的GitHub用户名&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>设置用户邮箱</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&#x27;填写自己的邮箱&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Git本地仓库提交代码到GitHub远程仓库"><a href="#Git本地仓库提交代码到GitHub远程仓库" class="headerlink" title="Git本地仓库提交代码到GitHub远程仓库"></a>Git本地仓库提交代码到GitHub远程仓库</h2><ol><li><p>初始化Git本地仓库（在项目文件夹内使用git init命令初始化git仓库，会自动生成一个.git文件夹）</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>将初始化后的本地git仓库与GitHub上的远程仓库进行关联，关联后可将本地仓库代码提交到远程仓库进行版本管理(SSH地址关联，需要先设置SSH秘钥)</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:[自己的GitHub用户名]/[GitHub上创建的仓库名].git</span><br></pre></td></tr></table></figure></li><li><p>查看本地仓库的状态，查看本地仓库有没有文件（不是查看文件夹里是否有文件）</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>切换提交的分支</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b master <span class="comment"># 切换到master分支，</span></span><br><span class="line"><span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"><span class="comment"># 如果不是，后面的所有设置的分支记得保持一致</span></span><br></pre></td></tr></table></figure></li><li><p>提交文件到缓存区</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add 要提交的文件名 <span class="comment">#如果要提交仓库中所有的文件，则使用 git add .</span></span><br></pre></td></tr></table></figure></li><li><p>将缓存区的文件提交到本地仓库</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交时的描述，比如此次提交做了什么修改等&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>将提交到本地仓库的文件项目提交到关联的GitHub远程仓库</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li><li><p>如果提交远程仓库时报错，远程仓库和本地仓库有冲突时，先合并仓库在提交</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin main</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot应用搭建</title>
      <link href="2021/05/11/springboot%E5%BA%94%E7%94%A8%E6%90%AD%E5%BB%BA/"/>
      <url>2021/05/11/springboot%E5%BA%94%E7%94%A8%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot应用搭建"><a href="#springboot应用搭建" class="headerlink" title="springboot应用搭建"></a>springboot应用搭建</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><div class="note green no-icon flat"><p>jdk1.8：Spring Boot推荐jdk1.8及以上版本；</p><p>Maven3.x：Maven3.3以上版本；</p><p>IntelliJIDEA2019</p><p>SpringBoot2.3.10RELEASE</p><p>SpringBoot内置了Servlet容器：Tomcat9.0   ServletVersion  4.0</p></div><h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><p>修改Maven的settings.xml文件</p><h3 id="配置Maven镜像提高下载速度"><a href="#配置Maven镜像提高下载速度" class="headerlink" title="配置Maven镜像提高下载速度"></a>配置Maven镜像提高下载速度</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="配置Maven的profiles标签添加profile"><a href="#配置Maven的profiles标签添加profile" class="headerlink" title="配置Maven的profiles标签添加profile"></a>配置Maven的profiles标签添加profile</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h2><div class="note green no-icon flat"><p>1.配置jdk和Maven仓库路径</p></div><ul><li>点击 Configure —&gt; 选择Structure for New Projects</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/AWd3FOJIbCy2QYq.png" alt="IDEA配置01.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/2j9fpcAtGV6YEhw.png" alt="IDEA配置02.png"></p><ul><li>选择Project —&gt; 选择jdk版本为1.8 —&gt; 点击OK</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/jPDmxTceF36kU78.png" alt="IDEA配置03.png"></p><ul><li>点击Configure  —&gt; 选择Settings</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/HUu5WdRAVzxkYKN.png" alt="IDEA配置04.png"></p><ul><li>选择Builld Tools下的Maven —&gt; 配置Maven仓库地址 （Maven要大于3.3的） —&gt;点击OK</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/ALIEPeaNC51Utxq.png" alt="IDEA配置05.png"></p><div class="note green no-icon flat"><p>2.创建Maven管理的项目</p></div><ul><li>点击Create New Project</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/Dy2boKJwH8FlIEN.png" alt="IDEA配置06.png"></p><ul><li>选择Maven —&gt; 选择SDK大于或等于1.8的 —&gt;点击Next</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/TpXYQE9ARJ7txKh.png" alt="IDEA配置07.png"></p><ul><li>填写GroupID和Artifactd —&gt; 点击Next</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/DYk7IvaHZjltyJB.png" alt="IDEA配置08.png"></p><ul><li>填写项目名称和项目地址—&gt;点击Finish</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/05/11/4JUMbdQrykwOC8N.png" alt="IDEA配置09.png"></p><div class="note green no-icon flat"><p>3.第一个springBoot应用</p></div><ul><li><p>在pom.xml文件中导入依赖</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.tx.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tx_sboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该工程下的子工程module --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;modules&gt;</span></span><br><span class="line"><span class="comment">        &lt;module&gt;springboot-first&lt;/module&gt;</span></span><br><span class="line"><span class="comment">        &lt;module&gt;springboot-profile&lt;/module&gt;</span></span><br><span class="line"><span class="comment">        &lt;module&gt;java-spi&lt;/module&gt;</span></span><br><span class="line"><span class="comment">        &lt;module&gt;springboot-datasource&lt;/module&gt;</span></span><br><span class="line"><span class="comment">    &lt;/modules&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置为父工程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- starter-parent里面管理了springboot所有的starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web服务依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 代码自动提示依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在src/main/java包下创建一个cn.tx.springboot子包，并在这个子包下创建一个TestController.java文件：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问hello界面！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在cn.tx.springboot包下创建一个启动类FirstSpringApplication.java文件：</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.tx.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstSpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FirstSpringApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>现在运行启动类的main函数，访问（<a href="http://localhost:8080/test/hello%EF%BC%89%E4%BE%BF%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://localhost:8080/test/hello）便可以看到访问成功界面，如下图所示：</a></p><p>  <img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/07/01/j6JfLFyXKx1EbIa.png" alt="1625124531818.png"></p></li><li><p>可以再resources目录下创建一个application.properties文件，并在文件中配置服务访问的端口号：</p>  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure><p>  然后访问（<a href="http://localhost:8081/test/hello%EF%BC%89%EF%BC%8C%E5%90%8C%E6%A0%B7%E5%8F%AF%E4%BB%A5%E6%88%90%E5%8A%9F%E8%AE%BF%E9%97%AE%E3%80%82">http://localhost:8081/test/hello），同样可以成功访问。</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot应用搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环信拉取聊天记录并解析</title>
      <link href="2021/04/26/%E7%8E%AF%E4%BF%A1%E6%8B%89%E5%8F%96%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%B9%B6%E8%A7%A3%E6%9E%90/"/>
      <url>2021/04/26/%E7%8E%AF%E4%BF%A1%E6%8B%89%E5%8F%96%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%B9%B6%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="环信拉取聊天记录并解析"><a href="#环信拉取聊天记录并解析" class="headerlink" title="环信拉取聊天记录并解析"></a>环信拉取聊天记录并解析</h2><p>环信返回的聊天记录文件下载地址下载的文件是.gz格式的压缩文件。如果直接下载的话输出流创建的文件必须是.gz格式压缩文件，否则会乱码。我这里是直接下载、解压、写入内存、读取写入内存的文件、转换字符串、解析json字符串为对象（解析json字符串使用了lombok和GsonFormat插件生成ChatMessageHistory类和DownLoadMessageUrl类）一起完成的。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*日期格式：yyyyMMddHH</span></span><br><span class="line"><span class="comment">*String date 历史消息日期 列如：&quot;2021042422&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String date)</span></span>&#123;</span><br><span class="line">        OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">            .url(<span class="string">&quot;https://a1.easemob.com/#&#123;Orgname&#125;/#&#123;Appname&#125;/chatmessages/&quot;</span>+date)</span><br><span class="line">                .header(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">                .header(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;Bearer #&#123;token&#125;&quot;</span>)</span><br><span class="line">                .get()</span><br><span class="line">                .build();</span><br><span class="line">        okHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;onFailure3: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(response.protocol() + <span class="string">&quot;:&quot;</span> +response.code() + <span class="string">&quot;: &quot;</span> + response.message());</span><br><span class="line">                Headers headers = response.headers();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.size(); i++) &#123;</span><br><span class="line">                    System.out.println(headers.name(i) + <span class="string">&quot;:&quot;</span> + headers.value(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//请求成功，获得json字符串</span></span><br><span class="line">                String messageUrlJson =  response.body().string();</span><br><span class="line">                <span class="comment">//解析json字符串</span></span><br><span class="line">                DownLoadMessageUrl downLoadMessageUrl = JSON.parseObject(messageUrlJson,DownLoadMessageUrl.class);</span><br><span class="line">                System.out.println(<span class="string">&quot;解析后得到的地址：&quot;</span>+downLoadMessageUrl.getData().get(<span class="number">0</span>).getUrl());</span><br><span class="line">                String messageFileUrl = downLoadMessageUrl.getData().get(<span class="number">0</span>).getUrl();</span><br><span class="line">                downLoadFile(messageFileUrl,date);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载聊天记录文件.gz并解压</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoadFile</span><span class="params">(String messageFileUrl,String date)</span></span>&#123;</span><br><span class="line">        String sourcedir = <span class="string">&quot;G:\\test\\&quot;</span>+date+<span class="string">&quot;.gz&quot;</span>;</span><br><span class="line"></span><br><span class="line">        OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .url(messageFileUrl)</span><br><span class="line">                .get()</span><br><span class="line">                .build();</span><br><span class="line">        okHttpClient.newCall(request).enqueue(<span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;downLoadFile: &quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(response.protocol() + <span class="string">&quot;:&quot;</span> +response.code() + <span class="string">&quot; : &quot;</span> + response.message());</span><br><span class="line">                Headers headers = response.headers();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.size(); i++) &#123;</span><br><span class="line">                    System.out.println(headers.name(i) + <span class="string">&quot;:&quot;</span> + headers.value(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//下载并解压.gz文件</span></span><br><span class="line">                unGzipFile(sourcedir,response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载并解压.gz文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unGzipFile</span><span class="params">(String sourcedir,Response response)</span> </span>&#123;</span><br><span class="line">        String ouputfile = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        InputStream fin = <span class="keyword">null</span>;</span><br><span class="line">        GZIPInputStream gzin = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fout = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//建立gzip压缩文件输入流</span></span><br><span class="line">            fin=response.body().byteStream();</span><br><span class="line">            <span class="comment">//建立gzip解压工作流</span></span><br><span class="line">            gzin = <span class="keyword">new</span> GZIPInputStream(fin);</span><br><span class="line">            <span class="comment">//分割压缩文件存储路径，获得解压后文件的存储路径</span></span><br><span class="line">            ouputfile = sourcedir.substring(<span class="number">0</span>,sourcedir.lastIndexOf(<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;解压后的文件路径及名称：&quot;</span>+ouputfile);</span><br><span class="line">            <span class="comment">//建立解压文件输出流</span></span><br><span class="line">            fout = <span class="keyword">new</span> FileOutputStream(ouputfile);</span><br><span class="line">            <span class="keyword">int</span> num;</span><br><span class="line">            <span class="keyword">byte</span>[] buf=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];<span class="comment">//建立缓冲字节数组</span></span><br><span class="line">            <span class="comment">//将解压后的文件流写入文件</span></span><br><span class="line">            <span class="keyword">while</span> ((num = gzin.read(buf,<span class="number">0</span>,buf.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fout.write(buf,<span class="number">0</span>,num);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;解压完成&quot;</span>);</span><br><span class="line">            <span class="comment">//解析json字符串文件，ouputfile为文件路径</span></span><br><span class="line">            getHistoryMessages(ouputfile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            System.out.println(ex.toString());</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (gzin != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    gzin.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fout != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    fout.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fin != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    fin.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将解压后的文件内容转换为字符串(json格式字符串)，并解析json字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHistoryMessages</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">            String msg = getStreamToStr(inputStream);</span><br><span class="line">            System.out.println(<span class="string">&quot;解压后的消息字符串：&quot;</span>+msg);</span><br><span class="line">            <span class="comment">//字符串替换</span></span><br><span class="line">            String str1 = msg.replace(<span class="string">&quot;&#123;\&quot;chat_type\&quot;&quot;</span>,<span class="string">&quot; &#123;\&quot;chat_type\&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//去除前后两端的空格</span></span><br><span class="line">            String str2 = str1.trim();</span><br><span class="line">            <span class="comment">//字符串分割</span></span><br><span class="line">            String[] strings = str2.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//将json格式字符串转化为对象</span></span><br><span class="line">            List&lt;ChatMessageHistory&gt; chatMessageHistoryList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">                ChatMessageHistory chatMessageHistory = JSON.parseObject(strings[i],ChatMessageHistory.class);</span><br><span class="line">                chatMessageHistoryList.add(chatMessageHistory);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chatMessageHistoryList.size(); i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;条消息：&quot;</span>+chatMessageHistoryList.get(i).getPayload().getBodies().get(<span class="number">0</span>).getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭字节输入流</span></span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个字节输入流转化为字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tInputStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStreamToStr</span><span class="params">(InputStream tInputStream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tInputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            InputStreamReader inputStreamReader = <span class="keyword">null</span>;</span><br><span class="line">            BufferedReader tBufferedReader = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//将字节输入流转换为字符输入流</span></span><br><span class="line">                inputStreamReader = <span class="keyword">new</span> InputStreamReader(tInputStream);</span><br><span class="line">                <span class="comment">//赋予字符流对象缓冲区</span></span><br><span class="line">                tBufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">                StringBuffer tStringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                String sTempOneLine;</span><br><span class="line">                <span class="keyword">while</span> ((sTempOneLine = tBufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    tStringBuffer.append(sTempOneLine);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> tStringBuffer.toString();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (inputStreamReader != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        inputStreamReader.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (tBufferedReader != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        tBufferedReader.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（<strong>注意：</strong>#{Orgname}、#{Appname}、#{token}是变量，替换成自己的即可）</p><p>（<strong>注意：</strong>InputStream字节输入流是不能复用的，具体知识自行百度补充）</p>]]></content>
      
      
      <categories>
          
          <category> 环信集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环信集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基础命令</title>
      <link href="2021/03/17/redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>2021/03/17/redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis数据存储格式："><a href="#Redis数据存储格式：" class="headerlink" title="Redis数据存储格式："></a>Redis数据存储格式：</h3><div class="note blue no-icon flat"><p>Redis自身是一个Map，其中所有的数据都是采用key：value的形式存储。</p></div><h3 id="Redis常用命令："><a href="#Redis常用命令：" class="headerlink" title="Redis常用命令："></a>Redis常用命令：</h3><table><thead><tr><th align="center">功能</th><th align="center">命令</th><th align="center">范例</th></tr></thead><tbody><tr><td align="center">设置数据</td><td align="center">set key value</td><td align="center">set name Tom</td></tr><tr><td align="center">获取数据</td><td align="center">get key</td><td align="center">get name</td></tr><tr><td align="center">清屏</td><td align="center">clear</td><td align="center">clear</td></tr><tr><td align="center">获取帮助</td><td align="center">help</td><td align="center">help</td></tr><tr><td align="center">退出</td><td align="center">quit/exit</td><td align="center">quit/exit</td></tr></tbody></table><h3 id="Redis数据类型-5种-："><a href="#Redis数据类型-5种-：" class="headerlink" title="Redis数据类型(5种)："></a>Redis数据类型(5种)：</h3><h4 id="string类型数据的基础操作："><a href="#string类型数据的基础操作：" class="headerlink" title="string类型数据的基础操作："></a>string类型数据的基础操作：</h4><ul><li><strong>添加/修改数据</strong></li></ul><table><thead><tr><th align="center">单个数据</th><th align="center">多个数据</th></tr></thead><tbody><tr><td align="center">set key value</td><td align="center">mset key1 value1 key2 value2 …</td></tr></tbody></table><ul><li><strong>获取数据</strong></li></ul><table><thead><tr><th align="center">单个数据</th><th align="center">多个数据</th></tr></thead><tbody><tr><td align="center">get key</td><td align="center">mget key1 key2 …</td></tr></tbody></table><ul><li><strong>删除数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure><ul><li><strong>获取数据字符个数（字符串长度）</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure><ul><li><strong>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure><h4 id="string类型数据的扩展操作："><a href="#string类型数据的扩展操作：" class="headerlink" title="string类型数据的扩展操作："></a>string类型数据的扩展操作：</h4><h5 id="数据库分表场景："><a href="#数据库分表场景：" class="headerlink" title="数据库分表场景："></a>数据库分表场景：</h5><ul><li><strong>设置数值数据增加指定范围的值</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">范例(num初始值为”1”)</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">incr key</td><td align="center">incr num</td><td align="center">num=”2”</td></tr><tr><td align="center">incrby key increment</td><td align="center">incrby num 10</td><td align="center">num=”12”</td></tr><tr><td align="center">incrbyfloat key increment</td><td align="center">incrbyfloat num 1.5</td><td align="center">num=”13.5”</td></tr></tbody></table><ul><li><strong>设置数值数据减少指定范围的值</strong></li></ul><table><thead><tr><th>命令</th><th>范例(num初始值为”15”)</th><th>结果</th></tr></thead><tbody><tr><td>decr key</td><td>decr num</td><td>num=”14”</td></tr><tr><td>decrby key increment</td><td>decrby num 10</td><td>num=”4”</td></tr></tbody></table><div class="note green no-icon flat"><ul><li>string在Redis内部存储默认是一个字符串，当遇到增减类操作incr、decr时会转成数值类型进行计算。</li><li>Redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响。</li><li>注意：按数值进行操作的数据，如果原始数据不能转成数值，或超越了Redis数值上限范围将报错。9223372036854775807（java中Long型数据最大值，Long.MAX_VALUE）</li></ul><h6 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h6><ul><li>Redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性。</li><li>此方案适用于所有数据库，且支持数据库集群。</li></ul></div><h5 id="设置数据生命周期："><a href="#设置数据生命周期：" class="headerlink" title="设置数据生命周期："></a>设置数据生命周期：</h5><ul><li><strong>设置数据具有制定的生命周期</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">范例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">setex key seconds value</td><td align="center">setex  num 10 Tom</td><td align="center">10秒后数据消失</td></tr><tr><td align="center">psetex key milliseconds value</td><td align="center">psetex num 1000 Tom</td><td align="center">1000毫秒后数据消失</td></tr></tbody></table><h6 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h6><ul><li>Redis控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作。</li></ul><h5 id="string类型数据操作的注意事项："><a href="#string类型数据操作的注意事项：" class="headerlink" title="string类型数据操作的注意事项："></a>string类型数据操作的注意事项：</h5><p>数据操作不成功的反馈与数据正常操作之间的差异</p><p>①表示运行结果是否成功</p><ul><li><p>（integer）0 —&gt; false 失败</p></li><li><p>（integer）1 —&gt; true 成功</p></li></ul><p>②表示运行结果</p><ul><li><p>（integer）3 —&gt; 3 3个</p></li><li><p>（integer）1 —&gt; 1 1个</p></li><li><p>数据未获取到</p><p>（nil）等同于null</p></li><li><p>数据最大存储量</p><p>512MB</p></li><li><p>数值计算最大范围(java中long的最大值)</p><p>±9223372036854775807</p></li></ul><h5 id="key的设置约定"><a href="#key的设置约定" class="headerlink" title="key的设置约定"></a>key的设置约定</h5><p>表名 ：主键名 ：主键值 ： 字段名</p><hr><h4 id="hash类型数据的基础操作："><a href="#hash类型数据的基础操作：" class="headerlink" title="hash类型数据的基础操作："></a>hash类型数据的基础操作：</h4><ul><li><strong>添加/修改数据</strong></li></ul><table><thead><tr><th align="center">单个数据操作</th><th align="center">多个数据操作</th></tr></thead><tbody><tr><td align="center">hset key field value</td><td align="center">hmset key field1 value1 field2 value2…</td></tr></tbody></table><ul><li><strong>获取数据</strong></li></ul><table><thead><tr><th align="center">单个数据操作</th><th align="center">多个数据操作</th></tr></thead><tbody><tr><td align="center">hget key field</td><td align="center">hmget key field1 field2 …</td></tr><tr><td align="center"></td><td align="center">hgetall key</td></tr></tbody></table><ul><li><strong>删除数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdel key field1 [field2]</span><br></pre></td></tr></table></figure><ul><li><strong>获取哈希表中字段的数量</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure><ul><li><strong>获取哈希表中是否存在指定的字段</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure><h4 id="hash类型数据扩展操作"><a href="#hash类型数据扩展操作" class="headerlink" title="hash类型数据扩展操作"></a>hash类型数据扩展操作</h4><ul><li>获取哈希表中所有的字段名或字段值</li></ul><table><thead><tr><th align="center">命令</th><th></th></tr></thead><tbody><tr><td align="center">hkeys key</td><td></td></tr><tr><td align="center">hvals key</td><td></td></tr></tbody></table><ul><li><strong>设置指定字段的数值数据增加指定范围的值</strong></li></ul><table><thead><tr><th align="center">命令</th><th></th></tr></thead><tbody><tr><td align="center">hincrby key field increment</td><td></td></tr><tr><td align="center">hincrbyfloat key field increment</td><td></td></tr></tbody></table><h5 id="hash类型数据操作注意事项"><a href="#hash类型数据操作注意事项" class="headerlink" title="hash类型数据操作注意事项"></a>hash类型数据操作注意事项</h5><ul><li><p>hash类型下的value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果未获取到数据，对应值为(nil)</p></li><li><p>每个hash可以存储2^32-1</p></li><li><p>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但hash设计初衷不是为了存储大量对象而设计的，切记不可滥用，更不可将hash作为对象列表使用。</p></li><li><p>hgetall操作可以获取全部属性，如果内部field过多，遍历整体数据效率就会很低，有可能成为数据访问瓶颈。</p><h4 id="hash类型应用场景"><a href="#hash类型应用场景" class="headerlink" title="hash类型应用场景"></a>hash类型应用场景</h4><h5 id="购物车订单场景"><a href="#购物车订单场景" class="headerlink" title="购物车订单场景"></a>购物车订单场景</h5><p>以客户id作为key，每位客户创建一个hash存储结构对象。</p><p>将商品编号作为field，购买数量作为value进行存储。</p><p>设一个新的key,将所有商品基本信息独立存储在一个hash。</p><p>将商品编号作为field，商品信息的json数据作为value进行存储。</p><p>添加商品：追加全新的field与value</p><p>浏览：遍历hash</p><p>更改数据：自增/自减，设置value值</p><p>删除商品：删除field</p><p>清空：删除key</p></li><li><p><strong>如果当前对应的key中的field有值就什么都不做，如果没有值就添加</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hsetnx key field value</span><br></pre></td></tr></table></figure><hr></li></ul><h4 id="list类型数据的基础操作："><a href="#list类型数据的基础操作：" class="headerlink" title="list类型数据的基础操作："></a>list类型数据的基础操作：</h4><p>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分。</p><p>需要的存储结构：一个存储空间保存多个数据，且通过数据可以提现进入顺序。</p><p>list类型：保存多个数据，底层使用双向链表存储结构实现。</p><ul><li><p><strong>添加/修改数据</strong></p><table><thead><tr><th align="center">命令</th></tr></thead><tbody><tr><td align="center">lpush key value1 [value2] ……</td></tr><tr><td align="center">rpush key value1 [value2] ……</td></tr></tbody></table></li><li><p><strong>获取数据</strong></p></li></ul><table><thead><tr><th align="center">命令</th></tr></thead><tbody><tr><td align="center">lrange key start stop</td></tr><tr><td align="center">lindex key index</td></tr><tr><td align="center">llen key</td></tr></tbody></table><ul><li><strong>获取并移除数据</strong></li></ul><table><thead><tr><th align="center">命令</th></tr></thead><tbody><tr><td align="center">lpop key</td></tr><tr><td align="center">rpop key</td></tr></tbody></table><h4 id="list类型数据扩展操作"><a href="#list类型数据扩展操作" class="headerlink" title="list类型数据扩展操作"></a>list类型数据扩展操作</h4><ul><li><strong>规定时间内获取并移除数据</strong></li></ul><table><thead><tr><th align="center">命令</th></tr></thead><tbody><tr><td align="center">blpop key1 [key2] timeout</td></tr><tr><td align="center">brpop key1 [key2] timeout</td></tr></tbody></table><ul><li><strong>移除指定数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrem key count value</span><br></pre></td></tr></table></figure><hr><h4 id="set类型数据的基础操作："><a href="#set类型数据的基础操作：" class="headerlink" title="set类型数据的基础操作："></a>set类型数据的基础操作：</h4><ul><li><strong>添加数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd key member1 [member2]</span><br></pre></td></tr></table></figure><ul><li><strong>获取全部数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure><ul><li><strong>删除数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srem key member1 [member2]</span><br></pre></td></tr></table></figure><ul><li><strong>获取集合数据总量</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure><ul><li><strong>判断集合中是否包含指定数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure><h4 id="set类型数据的扩展操作"><a href="#set类型数据的扩展操作" class="headerlink" title="set类型数据的扩展操作"></a>set类型数据的扩展操作</h4><h5 id="根据用户兴趣爱好推荐场景（操作随机数据）"><a href="#根据用户兴趣爱好推荐场景（操作随机数据）" class="headerlink" title="根据用户兴趣爱好推荐场景（操作随机数据）"></a>根据用户兴趣爱好推荐场景（操作随机数据）</h5><ul><li><strong>随机获取集合中指定数量的数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure><ul><li><strong>随机获取集合中的某个数据并将该数据移出集合</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spop key</span><br></pre></td></tr></table></figure><h5 id="set数据交并差操作"><a href="#set数据交并差操作" class="headerlink" title="set数据交并差操作"></a>set数据交并差操作</h5><ul><li><strong>求两个集合的交、并、差集</strong></li></ul><table><thead><tr><th align="center">操作名称</th><th align="center">命令</th></tr></thead><tbody><tr><td align="center">交集</td><td align="center">sinter key1 [key2]</td></tr><tr><td align="center">并集</td><td align="center">sunion key1 [key2]</td></tr><tr><td align="center">差集</td><td align="center">sdiff key1 [key2]</td></tr></tbody></table><ul><li><strong>求两个集合的交、并、差集并存储到指定集合中</strong></li></ul><table><thead><tr><th align="center">操作名称</th><th align="center">命令</th><th align="center">范例</th></tr></thead><tbody><tr><td align="center">key1与key2的交集存储到destination指定的集合中</td><td align="center">sinterstore destination key1 [key2]</td><td align="center">sinterstore u3 u1 u2</td></tr><tr><td align="center">key1与key2的并集存储到destination指定的集合中</td><td align="center">sunionstore destination key1 [key2]</td><td align="center">sunionstore u3 u1 u2</td></tr><tr><td align="center">key1与key2的差集存储到destination指定的集合中</td><td align="center">sdiffstore destination key1 [key2]</td><td align="center">sdiffstore u3 u1 u2</td></tr></tbody></table><ul><li><strong>将指定数据从原始集合中移动到目标集合中</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smove source destination  member</span><br></pre></td></tr></table></figure><ul><li><strong>Tips:</strong><ul><li>redis 应用于同类信息的关联搜索，二度关联搜索，深度关联搜索。</li><li>显示共同关注（一度）</li><li>显示共同好友（一度）</li><li>由用户A出发，获取到好友用户B的好友信息列表（一度）</li><li>由用户A出发，获取到好友用户B的购物清单列表（二度）</li><li>由用户A出发，获取到好友用户B的游戏充值列表（二度）</li></ul></li></ul><h5 id="set类型数据操作的注意事项"><a href="#set类型数据操作的注意事项" class="headerlink" title="set类型数据操作的注意事项"></a>set类型数据操作的注意事项</h5><ul><li><p>set类型不允许数据重复，如果添加的数据在set中已经存在，将只保留一份</p></li><li><p>set虽然与hash的存储结构相同，但是无法启用hash中存储值的空间</p></li></ul><hr><h4 id="sorted-set类型数据的基础操作："><a href="#sorted-set类型数据的基础操作：" class="headerlink" title="sorted_set类型数据的基础操作："></a>sorted_set类型数据的基础操作：</h4><p>新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</p><p>需要的存储结构：新的存储模型，可以保存可排序的数据</p><p>sorted_set类型：在set的存储结构基础上添加可排序字段</p><ul><li><strong>添加数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd key score1 member1 [score2 member2]</span><br></pre></td></tr></table></figure><ul><li><strong>获取全部数据</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">获取顺序</th></tr></thead><tbody><tr><td align="center">zrange key start stop [WITHSCORES]</td><td align="center">升序</td></tr><tr><td align="center">zrevrange key start stop [WITHSCORES]</td><td align="center">降序</td></tr></tbody></table><ul><li><strong>删除数据</strong></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrem key member [member ...]</span><br></pre></td></tr></table></figure><ul><li><strong>按条件获取数据</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">获取顺序</th><th align="center">范例</th></tr></thead><tbody><tr><td align="center">zrangebyscore key min max [WITHSCORES] [LIMIT]</td><td align="center">升序</td><td align="center">zrangebyscore u1 50 80 withscores 或zrangebyscore u1 50 80 limit 0 3 withscores</td></tr><tr><td align="center">zrevrangebyscore key max min [WITHSCORES]</td><td align="center">降序</td><td align="center">zrevrangebyscore u1 80 50 withscores</td></tr></tbody></table><ul><li><strong>按条件删除数据</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">范例</th><th align="center">删除方式</th></tr></thead><tbody><tr><td align="center">zremrangebyrank key start stop</td><td align="center">zremrangebyrank u1 0 1</td><td align="center">按索引删除</td></tr><tr><td align="center">zremrangebyscore key min max</td><td align="center">zremrangebyscore u1 50 80</td><td align="center">按score删除</td></tr></tbody></table><p>注意：</p><p>min与max用于限定搜索查询条件</p><p>start与stop用于限定查询范围，作用与索引，表示开始和结束的索引</p><p>offset与count用于限定查询范围，作用与查询结果，表示开始位置和数据总量</p><ul><li><strong>获取集合数据总量</strong></li></ul><table><thead><tr><th align="center">命令</th></tr></thead><tbody><tr><td align="center">zcard key</td></tr><tr><td align="center">zcount key min max</td></tr></tbody></table><ul><li><strong>集合交、并操作</strong></li></ul><table><thead><tr><th align="center">命令</th></tr></thead><tbody><tr><td align="center">zinterstore destination numkeys key [key …]</td></tr><tr><td align="center">zunionstore destination numkeys key [key …]</td></tr></tbody></table><h4 id="sorted-set类型数据的扩展操作"><a href="#sorted-set类型数据的扩展操作" class="headerlink" title="sorted_set类型数据的扩展操作"></a>sorted_set类型数据的扩展操作</h4><ul><li><strong>获取数据对应的索引（排名）</strong></li></ul><table><thead><tr><th align="center">命令</th></tr></thead><tbody><tr><td align="center">zrank key member</td></tr><tr><td align="center">zrevrank key member</td></tr></tbody></table><ul><li><strong>score值获取与修改</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">操作名称</th></tr></thead><tbody><tr><td align="center">zscore key member</td><td align="center">获取</td></tr><tr><td align="center">zincrby key increment member</td><td align="center">修改</td></tr></tbody></table><ul><li><strong>获取当前系统时间</strong></li></ul><table><thead><tr><th align="center">命令</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">time</td><td align="center">1）“1569575565”  2) “434277”</td></tr></tbody></table><h5 id="sorted-set类型数据操作的注意事项"><a href="#sorted-set类型数据操作的注意事项" class="headerlink" title="sorted_set类型数据操作的注意事项"></a>sorted_set类型数据操作的注意事项</h5><ul><li><p>score保存的数据存储空间是64位，如果 是整数范围是-9007199254740992~9007199254740992</p></li><li><p>score保存的数据也可以是一个双精度的double值，基于双精度浮点数的特征，可能会丢失精度，使用时要慎重</p></li><li><p>sorted_set底层存储还是基于set结构，因此数据不能重复，如果重复添加相同数据，score值将被反复覆盖，保留最后一次修改结果</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单列设计模式</title>
      <link href="2021/03/07/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/03/07/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么会有单列设计模式？"><a href="#为什么会有单列设计模式？" class="headerlink" title="为什么会有单列设计模式？"></a>为什么会有单列设计模式？</h3><p>当应用程序中创建了多个实例时可能会造成资源的浪费。并且多次调用多个实例操作数据时容易造成结果错误。而单例模式能保证应用程序中有且只有一个实例。可以保证一个类在内存中的对象的唯一性，在一些常用的工具类、线程池、缓存、数据库等程序中可能只允许我们创建一个对象。</p><h3 id="单例模式的设计思想"><a href="#单例模式的设计思想" class="headerlink" title="单例模式的设计思想"></a>单例模式的设计思想</h3><p>单例模式的关键在于保证应用程序中有且仅有一个对象，如何保证只有一个对象呢？其实只需要三步就可以保证对象的唯一性：</p><p>（1）不允许其他类new对象</p><p>（2）在本类中创建对象</p><p>（3）对外提供一个可以让其他类获取该对象方法</p><p>将上面步骤转化为代码描述为：</p><p>（1）私有化本类的构造方法</p><p>（2）通过new关键字在本类中创建一个本类对象</p><p>（3）定义一个公有方法，将在本类中创建的对象返回</p><h3 id="单例模式的java代码实现："><a href="#单例模式的java代码实现：" class="headerlink" title="单例模式的java代码实现："></a>单例模式的java代码实现：</h3><p>单例模式可以分为两大类：饿汉式、懒汉式。</p><p>饿汉式和懒汉式的区别：</p><ul><li><p>饿汉式：指全局的单例实例在类装载时构建。</p></li><li><p>懒汉式：指全局的单例实例在第一次被使用时构建。</p></li></ul><p>单例模式的写法大致可以分为5类：懒汉式、饿汉式、双重校验锁、静态内部类、枚举。</p><h4 id="单例模式的饿汉式（可用）"><a href="#单例模式的饿汉式（可用）" class="headerlink" title="单例模式的饿汉式（可用）"></a>单例模式的饿汉式（可用）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">Singleton singleton = Singleton.getSingleton();</span><br></pre></td></tr></table></figure><p>优点：</p><p>实现简单，在类加载时就完成了实例化，避免了线程同步问题。</p><p>缺点：</p><p>由于在类加载时就完成实例化，所以没有达到（Lazy Loading）懒加载的效果，也就是说可能我没有用到这个实例它也会创建，会造成内存浪费（但是这个浪费可以忽略，所以也是推荐使用的）。</p><h4 id="单例模式的饿汉式变换写法（可用）"><a href="#单例模式的饿汉式变换写法（可用）" class="headerlink" title="单例模式的饿汉式变换写法（可用）"></a>单例模式的饿汉式变换写法（可用）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">Singleton singleton = Singleton.getSingleton();</span><br></pre></td></tr></table></figure><p>其实这种写法和上一种写法一样，都是在类初始化时创建对象的，它的优缺点和上面一样，只是写法有点不同，可以归为一种写法。</p><h4 id="单例模式的懒汉式（线程不安全，不可用）"><a href="#单例模式的懒汉式（线程不安全，不可用）" class="headerlink" title="单例模式的懒汉式（线程不安全，不可用）"></a>单例模式的懒汉式（线程不安全，不可用）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">           singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">Singleton singleton = Singleton.getSingleton();</span><br></pre></td></tr></table></figure><p>这种方式是在调用getSingleton()方法时才创建对象，它相对于饿汉式比较懒，因此被称为懒汉式。</p><p>上述这种写法其实是存在线程安全问题的，那为什么会存在线程安全问题呢？</p><p>是因为在运行过程中可能会存在这么一种情况：当有多个线程去调用getSingleton()方法来获取Singleton的实例时，第一个线程在执行if(singleton == null)这个语句时，此时singleton 是为null，进入语句。在还没有执行singleton = new Singleton()时（此时singleton还是为null的）第二个线程也进入if(singleton == null)这个语句，因为第一个线程还没有执行singleton = new Singleton()，所以它会继续执行singleton = new Singleton()语句来实例化Singleton对象，因为第二个线程也进入了if语句，所以它也会实例化一个Singleton对象。这样就导致实例化了两个Singleton对象。所以它是存在线程安全的。</p><h4 id="线程安全的懒汉式（线程安全，效率低不推荐使用）"><a href="#线程安全的懒汉式（线程安全，效率低不推荐使用）" class="headerlink" title="线程安全的懒汉式（线程安全，效率低不推荐使用）"></a>线程安全的懒汉式（线程安全，效率低不推荐使用）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">           singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">Singleton singleton = Singleton.getSingleton();</span><br></pre></td></tr></table></figure><p>虽然通过加锁的方式解决了上面一种写法的线程安全问题，但是效率低。</p><p>缺点：</p><p>效率低，每个线程想要获得Singleton对象的时候，执行getSingleton()方法都要进行同步。而其实这个方法只需要执行一次实例化代码就够了，后面想要获得Singleton对象，直接return就行了。方法进行同步效率太低需要改进。</p><h4 id="单例模式的懒汉式（线程不安全，不可用）-1"><a href="#单例模式的懒汉式（线程不安全，不可用）-1" class="headerlink" title="单例模式的懒汉式（线程不安全，不可用）"></a>单例模式的懒汉式（线程不安全，不可用）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">Singleton singleton = Singleton.getSingleton();</span><br></pre></td></tr></table></figure><p>由于上面一种写法效率太低，可能有人会想到这种写法。其实这种写法跟（3）的写法一样是线程不安全的。当一个线程还没有实例化Singleton时，另一个线程执行到if(singleton == null)语句时就会进入到if语句，虽然加了锁，但等到第一个线程执行完singleton = new Singleton()跳出这个锁时，另一个已经进入if语句的线程同样会实例化一个新的Singleton对象。线程不安全的原理跟（3）中的类似，因此这种方法并不可行。</p><h4 id="单例模式懒汉式双重校验锁（推荐使用）"><a href="#单例模式懒汉式双重校验锁（推荐使用）" class="headerlink" title="单例模式懒汉式双重校验锁（推荐使用）"></a>单例模式懒汉式双重校验锁（推荐使用）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">Singleton singleton = Singleton.getSingleton();</span><br></pre></td></tr></table></figure><p>这一版代码解决了（3）和（4）中存在的问题，其中有两次if(singleton == null)的判断，这个叫做【双重检查 Double-Check】。</p><ul><li><p>第一个if(singleton == null)，其实是为了解决（4）中效率问题，只有singleton为null时，才进入synchronized的代码段。</p></li><li><p>第二个if(singleton == null)则是为了解决（3）中的线程安全问题，防止多线程可能实例多个对象的情况。</p></li></ul><p>volatile关键字是为了防止指令重排出现错误，就是说，由于有一个singleton不为null了，但是仍没有完成初始化的中间态，而这个时候，如果有其他线程刚好运行到第一层if语句，这里读取的singleton已经不为null了，所以直接把这个中间态的singleton拿去用，就会产生问题。（涉及原子操作、指令重排知识，volatile关键字的一个作用是禁止指令重排）</p><p>优点：</p><p>线程安全；延迟加载；效率较高</p><h4 id="内部类（推荐使用）"><a href="#内部类（推荐使用）" class="headerlink" title="内部类（推荐使用）"></a>内部类（推荐使用）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">Singleton singleton = Singleton.getSingleton();</span><br></pre></td></tr></table></figure><p>它利用了ClassLoader来保证了同步，同时又能让开发者控制类加载的时机。从内部看是一个饿汉式的单例，但从外部看又的确是懒汉式实现</p><p>优点：</p><p>避免了线程不安全；延迟加载；效率高。</p><h4 id="枚举（极推荐使用）"><a href="#枚举（极推荐使用）" class="headerlink" title="枚举（极推荐使用）"></a>枚举（极推荐使用）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingletonEnum</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    singleton;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonEnum</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">SingletonEnum.singleton.method();</span><br></pre></td></tr></table></figure><p>由于创建枚举实例的过程是线程安全的，所以这种写法也没有同步的问题。</p><p>优点：</p><p>这种写法在功能上与共有域方法相近，但它更简洁，无偿地提供了序列化机制，绝对防止对此实例化，即使是在面对复杂的序列化或者反射攻击的时候。</p><hr><p><strong>如有错误欢迎指出</strong>！</p><hr>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="2021/03/04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2021/03/04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><hr><h3 id="1、什么是冒泡排序？"><a href="#1、什么是冒泡排序？" class="headerlink" title="1、什么是冒泡排序？"></a>1、什么是冒泡排序？</h3><p>&ensp;&ensp;&ensp;&ensp;我们把相邻的元素进行两两比较，根据大小来交换元素的位置。</p><p>&ensp;&ensp;&ensp;&ensp;原始的冒泡排序是稳定排序，由于该排序算法的每一轮都要遍历所有元素，轮转的次数和元素数量相当，所以时间复杂度是O（N^2）</p><hr><h3 id="2、java代码实现及优化："><a href="#2、java代码实现及优化：" class="headerlink" title="2、java代码实现及优化："></a>2、java代码实现及优化：</h3><h4 id="（1）原始的冒泡排序："><a href="#（1）原始的冒泡排序：" class="headerlink" title="（1）原始的冒泡排序："></a>（1）原始的冒泡排序：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> array[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-i-<span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                tmp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    sort(array);</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="（2）冒泡排序优化一："><a href="#（2）冒泡排序优化一：" class="headerlink" title="（2）冒泡排序优化一："></a>（2）冒泡排序优化一：</h4><p>&ensp;&ensp;&ensp;&ensp;从上一版代码可以很明显看出，自从经过第六轮排序，整个数列已然是有序的了。但是排序算法仍然继续执行第七轮、第八轮。这种情况下，如果我们能判断出数列已经有序，并且做出标记，剩下的几轮排序就可以不必执行，提早结束工作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> array[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="comment">//有序标记，判断数组是否有序，初始值为true（true表示有序，false表示无序）</span></span><br><span class="line">        <span class="keyword">boolean</span> isSorted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length-i-<span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                tmp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                <span class="comment">//有元素交换，所以不是有序，标记变为false</span></span><br><span class="line">                isSorted = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是有序数组，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span>(isSorted)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    sort(array);</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;这一版代码利用布尔变量isSorted作为标记。如果在本轮排序中，元素有交换，则说明数列无序；如果没有元素交换，说明数列已然有序，直接跳出大循环。</p><hr><h4 id="（3）冒泡排序优化二："><a href="#（3）冒泡排序优化二：" class="headerlink" title="（3）冒泡排序优化二："></a>（3）冒泡排序优化二：</h4><p>&ensp;&ensp;&ensp;&ensp;按照上一版代码的逻辑，有序区的长度和排序的轮数是相等的。比如第一轮排序过后的有序区长度是1，第二轮排序过后的有序区长度是2，以此类推……。实际上，数列真正的有序区可能会大于这个长度，比如{3,4,2,1,5,6,7,8}数组的第二轮，后面5个元素实际都已经属于有序区。因此后面的许多次元素比较是没有意义的。</p><p>&ensp;&ensp;&ensp;&ensp;当对于{3,4,2,1,5,6,7,8}这种特殊数据时，后半部分{……,5,6,7,8}已经是有序的,因此可以通过对数列的有序区做界定，在每一轮排序的最后，记录下最后一次元素交换的位置，那个位置也就是无序数列的边界，再往后就是有序区了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> array[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//记录最后一次交换的位置</span></span><br><span class="line">    <span class="keyword">int</span> lastExchangeIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//无序数列的标记，每次只需比较到这里为止</span></span><br><span class="line">    <span class="keyword">int</span> sortBorder = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">        <span class="comment">//有序标记，判断数组是否有序，初始值为true（true表示有序，false表示无序）</span></span><br><span class="line">        <span class="keyword">boolean</span> isSorted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//只比较到无序数列边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sortBorder; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                tmp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                <span class="comment">//有元素交换，所以不是有序，标记变为false</span></span><br><span class="line">                isSorted = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//记录最后一次交换的位置</span></span><br><span class="line">                lastExchangeIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把无序数列的边界更新为最后一次交换元素的位置</span></span><br><span class="line">        sortBorder = lastExchangeIndex;</span><br><span class="line">        <span class="comment">//如果是有序数组，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span>(isSorted)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    sort(array);</span><br><span class="line">    System.out.println(Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;这一版代码中，sortBorder就是无序数列的边界。每一轮排序过程中，sortBorder之后的元素就完全不需要比较了，肯定是有序的。</p><hr><p><strong>&ensp;&ensp;&ensp;&ensp;如有错误欢迎留言！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/04/hello-world/"/>
      <url>2021/03/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="外挂标签"><a href="#外挂标签" class="headerlink" title="外挂标签"></a>外挂标签</h2><h3 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h3><table><thead><tr><th align="center">名称</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center">class</td><td align="center">【可选】标识，不同的标识有不同的配色<br/>（ default / primary / success / info / warning / danger ）</td></tr><tr><td align="center">no-icon</td><td align="center">【可选】不显示 icon</td></tr><tr><td align="center">style</td><td align="center">【可选】可以覆盖配置中的 style<br/>（simple/modern/flat/disabled）</td></tr></tbody></table><div class="note info no-icon flat"><p>simple</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默認 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示塊標籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>modern</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>flat</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>disabled</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note disabled %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon flat"><p>no-icon</p></div><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">########################</span></span><br><span class="line"></span><br><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
